module LiftController (
    input wire clk,        // Clock signal
    input wire rst,        // Reset signal
    input wire [3:0] req,  // Request signals for each floor (4 floors in total)
    output  [3:0] floor // Output indicating current floor (4-bit binary)
);

// Parameters for floor states
parameter IDLE = 4'b0000; // Lift is idle
parameter MOVING_UP = 4'b0001; // Lift is moving up
parameter MOVING_DOWN = 4'b0010; // Lift is moving down

// Internal registers
reg [3:0] current_floor; // Register to store current floor
reg [1:0] state; // Register to store lift state

// State machine
always @(posedge clk or posedge rst) begin
    if (rst) begin
        current_floor <= 4'b0000; // Initialize to ground floor
        state <= IDLE; // Initialize state to IDLE
    end else begin
        // State transitions
        case (state)
            IDLE: begin
                if (req > current_floor) begin
                    state <= MOVING_UP;
                end else if (req < current_floor) begin
                    state <= MOVING_DOWN;
                end
            end
            MOVING_UP: begin
                current_floor <= current_floor + 1;
                if (current_floor == req) begin
                    state <= IDLE;
                end
            end
            MOVING_DOWN: begin
                current_floor <= current_floor - 1;
                if (current_floor == req) begin
                    state <= IDLE;
                end
            end
        endcase
    end
end

// Output assignment
assign floor = current_floor;

endmodule
